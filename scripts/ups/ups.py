import requests
import lxml.html
import html
import re
import sys
import json
from datetime import datetime

origPostal = sys.argv[1]#"143000"
destPostal = sys.argv[2]#"690000"
weight = sys.argv[3]
volume = sys.argv[4]

def getDim(x):
    return int((float(x)**(1/3)) * 100)

url = "https://wwwapps.ups.com/ctc/results"

payload = { "timeOnlyRts":"false",
"ctcModPkgType":"02",
"ivrPkgType":"null",
"ctcModAccountFlag":"show",
"ctcModLoginStatus":"null",
"ctcModuleWeight":weight,
"ctcModuleWeightType":"kgs",
"importFlag":"",
"assume":"",
"rtsFlag":"",
"destCtyCurrency":"",
"destCtyDimUnit":"",
"destCtyUom":"",
"destCtyUomKey":"",
"afcity":"null",
"afpostal":"null",
"afcountry":"null",
"prefCity":"null",
"prefPostal":"null",
"prefcountry":"null",
"addressCountry":"null",
"userId":"",
"A_Resi":"null",
"isResidential":"02",
"addressDiffFromBook":"NO",
"addressBookCompanyOrName":"",
"addresseName":"",
"addressLine1":"",
"addressLine2":"",
"addressLine3":"",
"addressCity":"null",
"addressZip":"null",
"resComDet":"null",
"addressBookState":"null",
"requestor":"ctcmodule",
"taxIndicator":"null",
"DeSurInd":"null",
"AccNum":"null",
"returnURL":"null",
"page":"shipping/wwdt/tim(1ent).html",
"loc":"en_US",
"lanCancelURL":"",
"packageLetter":"",
"selectedAccountNumber":"",
"selectedAccountClassification":"null",
"isSelectedAccountABREnabled":"",
"isSelectedAccountGBPalletEnabled":"null",
"accImsFlag":"false",
"accType":"null",
"accSelectedCountry":"null",
"jsDisabled":"null",
"isAccountSelected":"null",
"modDestResidetail":"null",
"destRes":"02",
"modWeightUnit":"null",
"modDimUnit":"null",
"modContainer":"null",
"modWeight":"null",
"modLength":"null",
"modWidth":"null",
"modHeight":"null",
"modDeclValue":"null",
"modDropOfChoice":"null",
"modPickUpMethod":"null",
"modDailyPickUp":"null",
"modValueAdded":"null",
"modPickUpMethod1":"null",
"modPickupAdded":"null",
"modRequestor":"ctcmodule",
"modCustomValue":"null",
"modSameValue":"null",
"isModifyClicked":"null",
"modOrigCity":"",
"modOrigZip":origPostal,
"modOrigCountry":"RU",
"modDestCity":"",
"modDestZip":destPostal,
"modDestCountry":"RU",
"selectpackaging":"null",
"mypacking":"My Packaging",
"upsletter":"UPS Letter",
"expressbox":"UPS Express Box",
"smallbox":"UPS Express Box - Small",
"mediumbox":"UPS Express Box - Medium",
"largebox":"UPS Express Box - Large",
"tube":"UPS Tube",
"pack":"UPS Pak",
"tenkg":"UPS Worldwide Express 10KG Box",
"twentyfivekg":"UPS Worldwide Express 25KG Box",
"palletPkgType":"Pallet",
"timeOnlyCountries":"AS,AD,AO,AI,AG,AM,AW,BD,BB,BY,BZ,BJ,BT,BW,VG,BN,BF,BI,KH,CM,CV,CF,TD,CG,CK,DJ,DM,GQ,ER,ET,FO,FJ,GF,PF,GA,GM,GE,GL,GD,GP,GU,GN,GW,GY,HT,IS,CI,JM,JO,KI,LA,LB,LS,LR,LI,MK,MG,MW,MV,ML,MH,MQ,MR,FM,MC,MN,MS,MZ,MP,ME,NA,NP,AN,NC,NE,NF,PW,PG,RE,RW,SM,SN,SC,SL,SB,LK,KN,LC,VC,SR,SZ,SY,TJ,TZ,TG,TO,TT,TN,TM,TC,TV,UG,UA,UZ,VU,WF,WS,YE,ZM,ZW",
"promoDiscountEligible":"",
"billableWeightIndicator":"",
"customerClassificationCode":"",
"abrEligible":"",
"useAcc":"",
"modAccNumIn":"null",
"ctcModuleLogin":"",
"quoteTypeQcc":"estimateTimeCost.x",
"origtype":"",
"datevalue":"",
"noofpackages":"1",
"quoteselected":"estimateTimeCost.x",
"nextclicked":"next",
"fromaddORcountry":"",
"itsQuickquote":"no",
"onChangeAccValue":"",
"quickQuoteTypePackageLetter":"",
"transitTimeSelected":"",
"shipmentTypeFreight":"smallORPallet",
"origCurrency":"RUB",
"usPR":"",
"dismissLink":"",
"metricUnit":"CM",
"containerSelected":"",
"fromCountryChange":"false",
"toCountryChange":"false",
"ratingQuoteTypeTime":"null",
"ratingQuoteTypeDetail":"null",
"ratingQuoteTypePackage":"null",
"ratingQuoteTypeLetter":"null",
"ratingHowWillRetail":"null",
"ratingHowWillDriver":"null",
"ratingHowWillDotCom":"null",
"ratingHowWillOneEight":"null",
"ratingDailyPick":"null",
"ratingPackType":"null",
"ratingDestTypeRes":"",
"ratingOrigTypeRes":"",
"ratingDestTypeComm":"null",
"preferenceaddresskey":"000",
"palletselected":"0",
"refreshmod1":"",
"js_on":"true",
"shipDate":datetime.now().strftime("%Y-%m-%d"),
"accountPrefpickup":"null",
"accountPrefgiveDriver":"null",
"palletEligable":"null",
"imsStatus":"null",
"ipaParameter":"",
"DAF":"",
"HFP":"",
"shipmenttype":"smallPkg",
"inTranslation":"inches",
"cmTranslation":"cm.",
"lbsTranslation":"lbs.",
"kgsTranslation":"kgs.",
"weightTranslation":"Weight",
"widthTranslation":"Width",
"heightTranslation":"Height",
"quoteType":"estimateTimeCost.x",
"pageRenderName":"summaryResults",
"quoteType":"estimateTimeCost.x",
"origCountry":"RU",
"origCity":"",
"origPostal":origPostal,
"origCityHist":"",
"origStateHist":"",
"origPostalHist":"",
"origLocale":"en_US",
"origLocale":"CTC",
"origPolDiv3":"",
"military":"false",
"shipmentType":"smallPkg",
"destCountry":"RU",
"destCity":"",
"destPostal":destPostal,
"destCityHist":"",
"destStateHist":"",
"destPostalHist":"",
"destLocale":"en_US",
"destLocale":"CTC",
"destPolDiv3":"",
"military":"false",
"txt_locationId":"",
"uapDetails_locationId":"",
"uapDetails_CompanyName":"",
"uapDetails_AddressLine1":"",
"uapDetails_AddressLine2":"",
"uapDetails_City":"",
"uapDetails_State":"",
"uapDetails_Zip":"",
"uapDetails_Phone":"",
"uapDetails_Country":"",
"pickerDate":"08/15/2014",
"currencyScalar":"1",
"currencyUnits":"RUB",
"weight":"1",
"weightType":"KGS",
"packagesMod1":"1",
"pickupPrefSel":"0",
"deliveryPrefSel":"0",
"recalculateAccessorials":"",
"container":"02",
"length1":str(getDim(volume)),
"width1":str(getDim(volume)),
"height1":str(getDim(volume)),
"diUnit":"CM",
"weight1":weight,
"shipWeightUnit":"KGS",
"packages":"1",
"sameValues":"YES",
"currency1":volume,
"page":"accessorialModule",
"origCurrency":"",
"modValueAdded":"null",
"currency":"null",
"signRequiredALL":"DSS",
"return_label":"ERL",
"return_label_coc":"ERL",
"pickupMethod1":"1",
"page":"accessorialModule",
"origCurrency":"",
"modValueAdded":"null",
"currency":"null",
"signRequiredALL":"DSS",
"return_label":"ERL",
"return_label_coc":"ERL",
"WWEFMT":"",
"WWEFIT":"",
"ctc_second_submit":"10"}
headers = { "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "X-Requested-With": "XMLHttpRequest"}
try:
	r = requests.post(url, data=payload, headers=headers)#data.encode('utf-8'), headers=headers)
	# print(r.text, file=open('html.txt', 'w'))
	r = lxml.html.fromstring(r.text);
	costString = r.xpath("//td[@class='ship_total']/strong")[0].text

	try:
		deliveryTime = lxml.html.tostring(r.xpath('//*[@id="servicerow0"]/td[2]/dl/dd')[0]).decode('utf-8')
		deliveryTime = html.unescape(deliveryTime.split('<br>')[2]).strip().replace('\xa0', ' ')
		deliveryTime = max(1, (datetime.strptime(deliveryTime, "%B %d, %Y").date() - datetime.now().date()).days)
	except ValueError:
		deliveryTime = ""
		
	condition = r.xpath('//*[@id="servicerow0"]/td[1]/dl[1]')[0]
	condition = '\n'.join([(child.text or "").strip() for child in condition.iterdescendants()])
	clean = lambda cost: "".join(filter(lambda x: x.isdigit() or x == '.', cost))
	print(json.dumps({ "price": clean(costString),
						"time": str(deliveryTime),
						"condition": condition,
						}))
except:
	pass
#regexp way
#r = re.search("[0-9,]+.\\d{0,2}", costString)
#print(r.group().replace(',',''))
